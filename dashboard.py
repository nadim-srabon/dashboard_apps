# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OcDCcF6Lo-oxJvU3rTvJVLxXg-yGd0My
"""

import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import plotly.figure_factory as ff

# ------------------------
# Page Config
# ------------------------
st.set_page_config(page_title="Student Workload & Mental Health Dashboard", layout="wide")

# ------------------------
# Load Data
# ------------------------
@st.cache_data
def load_data():
    return pd.read_csv("data_cleaned_eda.csv")

data = load_data()

# ------------------------
# Sidebar
# ------------------------
with st.sidebar:
    st.image("university_logo.png", use_container_width=True)
    st.header("⚙️ Filters")

    gender_filter = st.multiselect(
        "Select Gender", options=data["Gender"].unique(), default=data["Gender"].unique()
    )

    job_filter = st.multiselect(
        "Job Status", options=data["job_bin"].unique(), default=data["job_bin"].unique()
    )

    extra_filter = st.multiselect(
        "Extracurricular", options=data["extra_curricular_bin"].unique(), default=data["extra_curricular_bin"].unique()
    )

    year_filter = st.multiselect(
        "Year of Study", options=data["current_year_num"].unique(), default=data["current_year_num"].unique()
    )

# Apply filters
filtered = data[
    (data["Gender"].isin(gender_filter)) &
    (data["job_bin"].isin(job_filter)) &
    (data["extra_curricular_bin"].isin(extra_filter)) &
    (data["current_year_num"].isin(year_filter))
]

# ------------------------
# Title and Overview
# ------------------------
st.title("📊 Student Workload & Mental Health Dashboard")

st.markdown(f"**Total records:** {len(data)} | **After filters:** {len(filtered)}")

c1, c2, c3, c4 = st.columns(4)
c1.metric("N", len(filtered))
c2.metric("Avg Study Hours", f"{filtered['study_hour_per_week'].mean():.1f}")
c3.metric("Avg Sleep Hours", f"{filtered['sleep_hours'].mean():.1f}")
c4.metric("Avg Stress (1-10)", f"{filtered['stress_1 to 10'].mean():.2f}")

# ------------------------
# Scatter Plot
# ------------------------
st.subheader("Scatter Plot (with regression line)")
numeric_cols = filtered.select_dtypes(include=np.number).columns.tolist()

x_axis = st.selectbox("Select X-axis", options=numeric_cols, index=numeric_cols.index("study_hour_per_week"))
y_axis = st.selectbox("Select Y-axis", options=numeric_cols, index=numeric_cols.index("stress_1 to 10"))

fig = px.scatter(
    filtered, x=x_axis, y=y_axis,
    trendline="ols", opacity=0.7, color="Gender"
)
st.plotly_chart(fig, use_container_width=True)

# ------------------------
# Boxplot
# ------------------------
st.subheader("Boxplot: Anxiety by Year of Study")
fig2 = px.box(filtered, x="current_year_num", y="anxiety_1 to 5", points="all", color="Gender")
st.plotly_chart(fig2, use_container_width=True)
# ------------------------
# Correlation Heatmap
# ------------------------
st.header("🔥 Correlation Heatmap")

numeric_cols = ["current_cgpa", "study_hour_per_week", "credits_enrolled_in",
                "extra_hours_per_week", "job_hours_per_week", "stress_1 to 10",
                "anxiety_1 to 5", "sleep_hours", "sleep_quality_1 to 10"]

corr = filtered[numeric_cols].corr()

fig3 = ff.create_annotated_heatmap(
    z=corr.values,
    x=list(corr.columns),
    y=list(corr.index),
    annotation_text=np.round(corr.values, 2),
    colorscale="Viridis",
    showscale=True
)
st.plotly_chart(fig3, use_container_width=True)


# ------------------------
# Regression Section
# ------------------------
st.subheader("🔎 Regression Analysis")

# Variable selection
predictors = st.multiselect(
    "Select independent variables (X)", options=numeric_cols,
    default=["study_hour_per_week"]
)
target = st.selectbox("Select dependent variable (Y)", options=numeric_cols, index=numeric_cols.index("stress_1 to 10"))

if predictors and target:
    X = filtered[predictors].values
    y = filtered[target].values

    if len(filtered) >= 2 and np.unique(X).shape[0] > 1:
        model = LinearRegression().fit(X, y)
        yhat = model.predict(X)
        r2 = r2_score(y, yhat)

        if len(predictors) == 1:
            st.write("### Simple Linear Regression")
            st.write(f"**Equation:** {target} = {model.intercept_:.3f} + {model.coef_[0]:.3f} × {predictors[0]}")
        else:
            st.write("### Multiple Linear Regression")
            coef_str = " + ".join([f"{coef:.3f}×{name}" for coef, name in zip(model.coef_, predictors)])
            st.write(f"**Equation:** {target} = {model.intercept_:.3f} + {coef_str}")

        st.write(f"**R²:** {r2:.3f}")

        if r2 < 0.3:
            st.info("Interpretation: Weak explanatory power.")
        elif r2 < 0.6:
            st.info("Interpretation: Moderate explanatory power.")
        else:
            st.info("Interpretation: Strong explanatory power.")
    else:
        st.warning("Not enough variation in selected variables for regression.")

# ------------------------
# Summary Panel
# ------------------------
st.subheader("📌 Insights")
st.markdown("""
- Stress is linked to workload (study hours, credits) and lifestyle (sleep, extracurriculars).
- Anxiety tends to vary strongly by year of study.
- Sleep quality shows a negative correlation with stress & anxiety.
- Regression allows exploring which factors best explain stress or anxiety.
""")